iCCsh Help

The following commands are available. Commands may be spread across multiple
lines by ending lines with a '\' character.

:d
:decl
:declare {identifier} {declaration} [ = {initializer} ]
    Declare (and optionally initialize) a variable.
    If only an identifier is given, then the rest of the arguments will be
    read from successive lines until a blank line is encountered.
    For simple declarations, the command name and identifier may be omitted.
    e.g. :declare f void (*f)(void) = &foo
    e.g. :declare coords
     ... struct {
     ...     int x, y;
     ... } coords = { 4, 2 }
     ... 
    e.g. const int x = 42
      => :declare x const int x = 42

:def
:define {macro-definition}
    Define a preprocessor macro.
    If no arguments are given, then the arguments will be read from
    successive lines until a blank line is encountered.
    Trailing '\' are automatically added to the ends of lines as necessary.
    e.g. :define foo bar  =>  #define foo bar
    e.g. :define
     ... foo(x,y,z)       =>  #define foo(x,y,z) \
     ...     bar(x,y,z)           bar(x,y,z)

:del
:delete {identifier}
    Delete the symbol with the given name.
    e.g. :delete x

:eval {code}
    Evaluate the given C code.
    If no arguments are given, then the arguments will be read from
    successive lines until a blank line is encountered.
    The command name may be omitted so long as the code does not trigger any
    other commands.
    e.g. :eval x = 42
    e.g. :eval
     ... x ^= y;
     ... y ^= x;
     ... x ^= y;
     ... 
    e.g. for(i = 0; i < 10; i++) \
             printf("%d\n", i);
      => :eval for(i = 0; i < 10; i++) ...

:f
:func
:function {identifier} {function-definition}
    Define a function.
    If only an identifier is given, then the rest of the arguments will be
    read from successive lines until a blank line is encountered.
    e.g. :function hello
     ... void hello(const char *name) {
     ...     printf("Hello %s!", name);
     ... }
     ... 

:h
:help
    Display this help text.

:i
:inc
:include {file}
    Include the given header file.
    Angle brackets and the .h extension may be omitted.
    e.g. :include "stdio.h"  =>  #include "stdio.h"
    e.g. :include <stdio.h>  =>  #include <stdio.h>
    e.g. :include stdio      =>  #include <stdio.h>

:info {identifier}
    Display information about the given identifier.
    The command name may be omitted.
    e.g. foo_bar_42
      => :info foo_bar_42

:l
:lib
:library {library}
    Link against the given library (equivalent to -l compiler option).
    e.g. :library m

:p
:printf {format} {arg}[, args...]
    Print the given formatted output.
    If the first character of the format string is '%', then the command name
    may be omitted.
    e.g. :printf x=%d\ny=%d x, y
    e.g. %d strlen("foo")
      => :printf %d strlen("foo")

:q
:quit
    Quit the shell.

:sandbox {value}
    Set whether code should be executed in sandbox mode.
    In sandbox mode, a separate process is created each time compiled code is
    executed. This prevents the shell from being terminated by events such as
    segmentation faults and calls to exit(). However, this may cause problems
    with functions which dynamically allocate memory or modify external global
    or static variables.
    If the argument is "on", "true", "yes", "enable", or "1", then sandbox
    mode is enabled. All other values disable sandbox mode.
    Sandbox mode is enabled by default.
    e.g. :sandbox off

:undef
:undefine {macro}
    Undefine a preprocessor macro.
    e.g. :undefine foo  =>  #undef foo
